Методы для строк (str):

    capitalize(): Переводит первый символ строки в верхний регистр, а все остальные в нижний.
    lower(): Преобразует строку в нижний регистр.
    upper(): Преобразует строку в верхний регистр.
    strip(): Удаляет пробельные символы в начале и в конце строки.
    split(): Разделяет строку на подстроки по заданному разделителю.
    replace(): Заменяет все вхождения указанной подстроки на другую подстроку.
    startswith(): Проверяет, начинается ли строка с указанной подстроки.
    endswith(): Проверяет, заканчивается ли строка указанной подстрокой.
    join(): Соединяет элементы списка строк в одну строку, используя указанный разделитель.
    • find(str, [start],[end]) - Поиск подстроки в строке. Возвращает номер первого вхождения или -1
    • rfind(str, [start],[end]) - Поиск подстроки в строке. Возвращает номер последнего вхождения или -1
    • index(str, [start],[end]) - Поиск подстроки в строке. Возвращает номер первого вхождения или вызывает ValueError
    • rindex(str, [start],[end]) - Поиск подстроки в строке. Возвращает номер последнего вхождения или вызывает ValueError
    • replace(шаблон, замена) - Замена шаблона
    • split(символ) - Разбиение строки по разделителю
    • upper() - Преобразование строки к верхнему регистру
    • lower() - Преобразование строки к нижнему регистру swapcase() - Переводит символы нижнего регистра в верхний, а верхнего – в нижний
    • startswith(str) - Начинается ли строка с шаблона str
    • title() - Первую букву каждого слова переводит в верхний регистр, а все остальные в нижний
    • capitalize() - Переводит первый символ строки в верхний регистр, а все остальные в нижний
    • endswith(str) - Заканчивается ли строка S шаблоном str
    • isdigit() - Состоит ли строка из цифр
    • isalpha() - Состоит ли строка из букв
    • isalnum() - Состоит ли строка из цифр или букв
    • islower() - Состоит ли строка из символов в нижнем регистре
    • isupper() - Состоит ли строка из символов в верхнем регистре
    • isspace() - Состоит ли строка из неотображаемых символов (пробелов, табуляции)
    • istitle() - Начинаются ли слова в строке с заглавной буквы
Методы для списков (list):
    append(x): Добавляет элемент x в конец списка.
    clear(): Удаляет все элементы из списка.
    copy(): Создает и возвращает копию списка.
    count(x): Возвращает количество вхождений элемента x в список.
    extend(iterable): Добавляет элементы из итерируемого объекта iterable в конец списка.
    index(x[, start[, end]]): Возвращает индекс первого вхождения элемента x в списке. Можно указать диапазон поиска с помощью аргументов start и end.
    insert(i, x): Вставляет элемент x на позицию i в списке.
    pop([i]): Удаляет и возвращает элемент на позиции i в списке. Если i не указан, удаляется и возвращается последний элемент списка.
    remove(x): Удаляет первое вхождение элемента x из списка.
    reverse(): Изменяет порядок элементов в списке на обратный.
    sort(key=None, reverse=False): Сортирует элементы списка в возрастающем порядке. Можно указать функцию key для определения ключа сортировки и аргумент reverse=True для сортировки в убывающем порядке.
    __add__(other): Возвращает новый список, содержащий все элементы текущего списка и элементы списка other.
    __contains__(x): Проверяет, содержится ли элемент x в списке.
    __delitem__(i): Удаляет элемент на позиции i в списке.
    __eq__(other): Проверяет равенство списка с другим списком other.
    __getitem__(i): Возвращает элемент на позиции i в списке.
    __iadd__(other): Добавляет элементы списка other к текущему списку.
    __imul__(n): Дублирует элементы текущего списка n раз.
    __iter__(): Возвращает итератор для обхода элементов списка.
    __len__(): Возвращает количество элементов в списке.
    __mul__(n): Создает и возвращает новый список, содержащий повторенные n раз элементы текущего списка.
    __ne__(other): Проверяет неравенство списка с другим списком other.
    __reversed__(): Возвращает итератор для обхода элементов списка в обратном порядке.
    __setitem__(i, x): Устанавливает элемент на позиции i в списке в значение x.
    __sizeof__(): Возвращает размер списка в байтах.
Методы для словарей (dict):

    clear(): Удаляет все элементы из словаря.
    copy(): Создает и возвращает копию словаря.
    fromkeys(seq[, value]): Создает новый словарь с ключами из seq и значениями, равными value (по умолчанию None).
    get(key[, default]): Возвращает значение, связанное с указанным ключом. Если ключ не найден, возвращает значение default (по умолчанию None).
    items(): Возвращает список кортежей (ключ, значение) для всех пар ключ-значение в словаре.
    keys(): Возвращает список всех ключей в словаре.
    pop(key[, default]): Удаляет элемент с указанным ключом из словаря и возвращает его значение. Если ключ не найден, возвращает значение default (по умолчанию возникает исключение KeyError).
    popitem(): Удаляет и возвращает произвольный элемент (ключ, значение) из словаря в виде кортежа. Если словарь пуст, возникает исключение KeyError.
    setdefault(key[, default]): Возвращает значение, связанное с указанным ключом. Если ключ не найден, добавляет ключ со значением default (по умолчанию None) в словарь и возвращает default.
    update([other]): Обновляет словарь, добавляя пары ключ-значение из другого словаря other или последовательности кортежей (key, value).
    values(): Возвращает список всех значений в словаре.
    __contains__(key): Проверяет, содержит ли словарь указанный ключ.
    __delitem__(key): Удаляет элемент с указанным ключом из словаря.
    __eq__(other): Проверяет равенство словаря с другим словарем other.
    __getitem__(key): Возвращает значение, связанное с указанным ключом.
    __iter__(): Возвращает итератор для обхода ключей словаря.
    __len__(): Возвращает количество элементов (пар ключ-значение) в словаре.
    __ne__(other): Проверяет неравенство словаря с другим словарем other.
    __new__(...): Создает новый объект словаря.
    __repr__(): Возвращает строковое представление словаря.
    __setitem__(key, value): Устанавливает значение для указанного ключа в словаре.
    __sizeof__(): Возвращает размер словаря в байтах.
    clear(): Удаляет все элементы из словаря.
    copy(): Создает и возвращает копию словаря.
    fromkeys(seq[, value]): Создает новый словарь с ключами из seq и значениями, равными value (по умолчанию None).
    get(key[, default]): Возвращает значение, связанное с указанным ключом. Если ключ не найден, возвращает значение default (по умолчанию None).
    items(): Возвращает список кортежей (ключ, значение) для всех пар ключ-значение в словаре.
    keys(): Возвращает список всех ключей в словаре.
    pop(key[, default]): Удаляет элемент с указанным ключом из словаря и возвращает его значение. Если ключ не найден, возвращает значение default (по умолчанию возникает исключение KeyError).
    popitem(): Удаляет и возвращает произвольный элемент (ключ, значение) из словаря в виде кортежа. Если словарь пуст, возникает исключение KeyError.
    setdefault(key[, default]): Возвращает значение, связанное с указанным ключом. Если ключ не найден, добавляет ключ со значением default (по умолчанию None) в словарь и возвращает default.
    update([other]): Обновляет словарь, добавляя пары ключ-значение из другого словаря other или последовательности кортежей (key, value).
    values(): Возвращает список всех значений в словаре.
методы для кортежей (tuple) в Python:

    count(element): Возвращает количество вхождений элемента element в кортеже.
    index(element): Возвращает индекс первого вхождения элемента element в кортеже. Если элемент не найден, вызывается ошибка.